#!/usr/bin/env bash
case "$OSTYPE" in
msys | cygwin)
  PWD_ARGS="-W"
  ;;
esac

# CONSTANTS
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd $PWD_ARGS)
DOCKERIZED_ROOT=$(dirname "$SCRIPT_DIR")
DOCKERIZED_COMPOSE_FILE="${DOCKERIZED_ROOT}/docker-compose.yml"
DOCKERIZED_BINARY="${DOCKERIZED_ROOT}/build/dockerized"

# region COMPILE DOCKERIZED
DOCKERIZED_COMPILE=
if [ "$1" == "--compile" ] || [ "$1" == "--compile=docker" ]; then
  DOCKERIZED_COMPILE="docker"
  shift
fi

if [ "$1" == "--compile=host" ]; then
  DOCKERIZED_COMPILE="host"
  shift
fi

case "$OSTYPE" in
msys | cygwin)
  DOCKERIZED_COMPILE_GOOS=windows
  DOCKERIZED_BINARY="${DOCKERIZED_BINARY}.exe"
  ;;
darwin*)
  DOCKERIZED_COMPILE_GOOS=darwin
  ;;
# Operating systems below not tested. Logic based on:
#  - https://github.com/dylanaraps/neofetch/issues/433
#  - https://gist.github.com/asukakenji/f15ba7e588ac42795f421b48b8aede63
openbsd*)
  DOCKERIZED_COMPILE_GOOS=openbsd
  ;;
freebsd*)
  DOCKERIZED_COMPILE_GOOS=freebsd
  ;;
netbsd*)
  DOCKERIZED_COMPILE_GOOS=netbsd
  ;;
solaris*)
  DOCKERIZED_COMPILE_GOOS=solaris
  ;;
# default
*)
  DOCKERIZED_COMPILE_GOOS=linux
  ;;
esac

case "$(uname -m)" in
x86_64)
  DOCKERIZED_COMPILE_GOARCH=amd64
  ;;
i*86)
  DOCKERIZED_COMPILE_GOARCH=386
  ;;
arm64 | aarch64)
  DOCKERIZED_COMPILE_GOARCH=arm64
  ;;
esac

if [ "$DOCKERIZED_COMPILE" ] || [ ! -f "$DOCKERIZED_BINARY" ]; then
  echo "Compiling dockerized..." >&2
  rm -f "$DOCKERIZED_BINARY"

  GIT_COMMIT=$(cd $DOCKERIZED_ROOT; git rev-list -1 HEAD)
  GO_BUILD_ARGS="-ldflags '-X main.Version=${GIT_COMMIT}'"
  GO_LDFLAGS="-X main.Version=${GIT_COMMIT}"
  if [ "${DOCKERIZED_COMPILE:-docker}" == "docker" ]; then
    # Create a volume for go pkg cache instead of local mount (#33)
    DOCKERIZED_COMPILE_VOLUME="dockerized_compile_${DOCKERIZED_COMPILE_GOOS}_${DOCKERIZED_COMPILE_GOARCH}"
    docker volume create --driver local "${DOCKERIZED_COMPILE_VOLUME}"

    CMD_BUILD="go build -ldflags \"$GO_LDFLAGS\" -o //build/ ."
    CMD_CHOWN="chown $(id -u):$(id -g) //build/$(basename $DOCKERIZED_BINARY)" # fix permissions (#33)
    CMD_CHMOD="chmod +x //build/$(basename $DOCKERIZED_BINARY)" # fix executable bit (#33)
    docker run \
      --rm \
      -e "GOOS=${DOCKERIZED_COMPILE_GOOS}" \
      -e "GOARCH=${DOCKERIZED_COMPILE_GOARCH}" \
      -v "${DOCKERIZED_ROOT}:/src" \
      -v "${DOCKERIZED_ROOT}/build:/build" \
      -v "${DOCKERIZED_COMPILE_VOLUME}:/go/pkg" \
      -w //src \
      "golang:1.17.8" \
      bash -c "$CMD_BUILD && $CMD_CHOWN && $CMD_CHMOD"
  else
    (
    cd "$DOCKERIZED_ROOT"
    go build -ldflags "$GO_LDFLAGS" -o build/ .
    )
  fi

  if [ $? -ne 0 ]; then
    echo "Failed to compile dockerized" >&2
    exit 1
  fi

  if [ $# -eq 0 ]; then
    echo "Compiled dockerized" >&2
    exit 0
  fi
fi
# endregion

# RUN DOCKERIZED:
"$DOCKERIZED_BINARY" "$@"
