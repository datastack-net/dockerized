version: "3"

services:
  alpine:
    &alpine
    image: "alpine_${ALPINE_VERSION}"
    build:
      context: "${DOCKERIZED_ROOT:-.}/apps/alpine"
      args:
        ALPINE_VERSION: "${ALPINE_VERSION}"
        ALPINE_PACKAGES: "tree"
  ansible: &ansible
    image: "willhallonline/ansible:${ANSIBLE_VERSION}-${ANSIBLE_BASE}"
    entrypoint: [ "/init.sh", "ansible" ]
    volumes:
      - "${HOME}/.ssh:/dockerized/host/home/.ssh"
      - ./apps/ansible/init.sh:/init.sh
  ansible-playbook:
    <<: *ansible
    entrypoint: [ "/init.sh", "ansible-playbook" ]
    environment:
      - ANSIBLE_CONFIG=ansible.cfg
  ab:
    <<: *alpine
    image: "ab"
    build:
      context: "${DOCKERIZED_ROOT:-.}/apps/alpine"
      args:
        ALPINE_VERSION: "${ALPINE_VERSION}"
        ALPINE_PACKAGES: "apache2-ssl apache2-utils ca-certificates"
    entrypoint: [ "ab" ]
  aws:
    image: "amazon/aws-cli:${AWS_VERSION}"
    volumes:
      - "${HOME:-home}/.aws:/root/.aws"
    environment:
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID:-}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY:-}"
  az:
    image: "mcr.microsoft.com/azure-cli:${AZ_VERSION}"
    entrypoint: [ "az" ]
    volumes:
      - "${HOME:-home}/.ssh:/root/.ssh"
      - "${HOME:-home}/.dockerized/apps/az:/root/.azure"
  bash:
    image: "dockerized_bash"
    build:
      context: "${DOCKERIZED_ROOT:-.}/apps/alpine"
      args:
        ALPINE_VERSION: "${ALPINE_VERSION}"
        ALPINE_PACKAGES: "bash"
    entrypoint: [ "/bin/bash" ]
  doctl:
    image: "doctl:${DOCTL_VERSION}"
    build:
      context: "${DOCKERIZED_ROOT:-.}/apps/doctl"
      dockerfile: "${DOCKERIZED_ROOT:-.}/apps/alpine/Dockerfile"
      args:
        ALPINE_VERSION: "${ALPINE_VERSION}"
        BUILD_SCRIPT_ARGS: "${DOCTL_VERSION}"
    entrypoint: [ "doctl" ]
    volumes:
      - "${HOME:-home}/.dockerized/apps/doctl:/root"
  dotnet:
    image: "mcr.microsoft.com/dotnet/sdk:${DOTNET_VERSION}-alpine"
    entrypoint: [ "dotnet" ]
  gh:
    image: "gh:${GH_VERSION}"
    build:
      context: "${DOCKERIZED_ROOT:-.}/apps/gh"
      dockerfile: "${DOCKERIZED_ROOT:-.}/apps/alpine/Dockerfile"
      args:
        ALPINE_VERSION: "${ALPINE_VERSION}"
        ALPINE_PACKAGES: "git openssh-client"
        BUILD_SCRIPT_ARGS: "${GH_VERSION}"
    entrypoint: [ "/init.sh", "/gh/bin/gh" ]
    volumes:
      - "${HOME:-home}/.dockerized/apps/gh:/root"
      - "${DOCKERIZED_ROOT:-.}/apps/gh/init.sh:/init.sh"
    environment:
      BROWSER: "echo"
  git:
    image: "alpine/git:v${GIT_VERSION}"
    entrypoint: [ "git" ]
  ghci:
    image: "haskell:${GHCI_VERSION}"
    entrypoint: [ "ghci" ]
  go:
    image: "golang:${GO_VERSION}"
    entrypoint: [ "go" ]
    volumes:
      - "go_cache:/go/pkg"
    environment:
      GOOS: "${GOOS:-}"
      GOARCH: "${GOARCH:-}"
  helm:
    image: "alpine/helm:${HELM_VERSION}"
  http:
    image: "alpine/httpie:${HTTP_VERSION}"
    entrypoint: [ "http" ]
  java:
    image: "openjdk:${JAVA_VERSION}"
    entrypoint: [ "java" ]
  jq:
    image: stedolan/jq
  pdflatex:
    image: "pdflatex"
    build:
      context: "${DOCKERIZED_ROOT:-.}/apps/alpine"
      dockerfile: "${DOCKERIZED_ROOT:-.}/apps/alpine/Dockerfile"
      args:
        ALPINE_VERSION: "${LATEX_ALPINE_VERSION}"
        ALPINE_PACKAGES: "texlive-full py-pygments gnuplot make git"
    entrypoint: [ "pdflatex" ]
  lua:
    image: "${LUA_IMAGE}:${LUA_VERSION}"
    entrypoint: [ "lua" ]
  node:
    &node
    image: "node:${NODE_VERSION}"
    entrypoint: [ "node" ]
    volumes:
      - "node_modules:/usr/local/lib/node_modules"
      - "${HOME:-home}/.dockerized/apps/node:/root"
  npm:
    <<: *node
    entrypoint: [ "npm" ]
  npx:
    <<: *node
    entrypoint: [ "npx" ]
  perl:
    image: perl:${PERL_VERSION}
    entrypoint: [ "perl" ]
  php:
    image: "php:${PHP_VERSION}"
  psql:
    image: "postgres:${PSQL_VERSION}"
    entrypoint: [ "psql" ]
  protoc:
    image: "protoc:${PROTOC_VERSION}"
    build:
      context: "${DOCKERIZED_ROOT:-.}/apps/protoc"
      args:
        PROTOC_VERSION: "${PROTOC_VERSION}"
        PROTOC_BASE: "${PROTOC_BASE}"
        PROTOC_ARCH: "${PROTOC_ARCH}"
  python:
    &python
    image: "python:${PYTHON_VERSION}"
    entrypoint: [ "python" ]
    volumes:
      - "python_modules:/usr/local/lib/python${PYTHON_VERSION}/site-packages"
      - "${HOME:-home}/.dockerized/apps/python:/root"
  python2:
    image: "python:${PYTHON2_VERSION}"
  pip:
    <<: *python
    entrypoint: [ "pip" ]
  ruby: &ruby
    image: "ruby:${RUBY_VERSION}"
    entrypoint: [ "ruby" ]
  rake:
    <<: *ruby
    entrypoint: [ "rake" ]
  gem:
    <<: *ruby
    entrypoint: [ "gem" ]
  rustc:
    image: "rust:${RUSTC_VERSION}"
    entrypoint: [ "rustc" ]
  s3cmd:
    build:
      context: "${DOCKERIZED_ROOT:-.}/apps/s3cmd"
      args:
        S3CMD_VERSION: "${S3CMD_VERSION}"
        S3CMD_BASE: "${S3CMD_BASE}"
    image: "s3cmd:${S3CMD_VERSION}"
    environment:
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID:-}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY:-}"
    volumes:
      - "${HOME:-home}/.dockerized/apps/s3cmd:/root"
  #  semantic-release-cli:
  #    <<: *node
  #    entrypoint: [ "npx", "--package=semantic-release-cli@${SEMANTIC_RELEASE_VERSION}", "semantic-release-cli" ]
  #    volumes:
  #      - "${HOME:-home}/.dockerized/apps/gh:/root"
  swagger-codegen:
    image: "swaggerapi/swagger-codegen-cli-v3:${SWAGGER_CODEGEN_VERSION}"
  swipl:
    image: "swipl:${SWIPL_VERSION}"
    entrypoint: [ "swipl" ]
  telnet:
    <<: *alpine
    build:
      context: "${DOCKERIZED_ROOT:-.}/apps/alpine"
      args:
        ALPINE_VERSION: "${ALPINE_VERSION}"
        ALPINE_PACKAGES: "busybox-extras"
    entrypoint: [ "telnet" ]
  tree:
    <<: *alpine
    build:
      context: "${DOCKERIZED_ROOT:-.}/apps/alpine"
      args:
        ALPINE_VERSION: "${ALPINE_VERSION}"
        ALPINE_PACKAGES: "tree"
    entrypoint: [ "tree" ]
  tsc:
    <<: *node
    entrypoint: [ "npx", "--package=typescript@${TSC_VERSION}", "tsc" ]
  vue:
    <<: *node
    entrypoint: [ "npx", "--package=@vue/cli@${VUE_VERSION}", "vue" ]
  wget:
    image: "${DEFAULT_BASE}"
    entrypoint: [ "wget" ]
  yarn:
    <<: *node
    entrypoint: [ "yarn" ]
  youtube-dl:
    image: "mikenye/youtube-dl:${YOUTUBE_DL_VERSION}"
  zip:
    image: "zip"
    build:
      context: "${DOCKERIZED_ROOT:-.}/apps/alpine"
      args:
        ALPINE_VERSION: "${ALPINE_VERSION}"
        ALPINE_PACKAGES: "zip"
    entrypoint: [ "/usr/bin/zip" ]

volumes:
  # Default for ${HOME}. Avoids creating directories on host machine when HOME isn't set.
  home: {}
  node_modules: { }
  python_modules: { }
  pip_cache: { }
  go_cache: { }
